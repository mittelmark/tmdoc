#!/usr/bin/env tclsh
lappend auto_path ..
package require tcltest
package require tmdoc

tcltest::test tmdoc-test-1.1 {
    Calling my tmdoc::tmeval with a simple code chunk
} -body {
     tmdoc::tmeval "\n```{.tcl}
set x 1; set x
```\n"   
} -result {
```{tclcode}
set x 1; set x
```

```{tclout}
==> 1
```

}

tcltest::test tmdoc-test-1.2 {
    Calling my tmdoc::tmeval with a simple code chunk and echo=false
} -body {
     tmdoc::tmeval "\n```{.tcl echo=false}
set x 2; set x
```\n"   
} -result {
```{tclout}
==> 2
```

}

tcltest::test tmdoc-test-1.3 {
    Calling my tmdoc::tmeval with a simple code chunk and 
    eval=false and results=hide
} -body {
     tmdoc::tmeval "
Some text

```{.tcl echo=false results=hide}
set x 3; set x
```\n"
} -result {
Some text


}

tcltest::test tmdoc-test-1.4 {
    Calling my tmdoc::tmeval with a simple code chunk and 
    eval=false and results=hide separated by comma
} -body {
     tmdoc::tmeval "
Some text

```{.tcl echo=false results=hide}
set x 3; set x
```\n"
} -result {
Some text


}

tcltest::test tmdoc-test-1.5 {
    Calling my tmdoc::tmeval with a simple code chunk and 
    eval=false and results=hide separated by comma
    with space and tcl instead of .tcl marker
} -body {
     tmdoc::tmeval "
Some text with space test

``` {tcl echo=false, results=hide}
set x 5; set x
```"

} -result {
Some text with space test

}

tcltest::test tmdoc-test-1.6 {checking include} -body {
   set out [open include.md w 0600]
   puts $out "## Hello Include"
   close $out
   tmdoc::tmeval "
Some text

`tcl include include.md`

Some text
"
} -result {
Some text

## Hello Include

Some text

}

tcltest::test tmdoc-test-1.7 {
    Calling my tmdoc::tmeval with results=asis 
    to display a table using the list2md command
} -body {
     tmdoc::tmeval "
Some text

```{tcl echo=false, results=asis}
set h {A B C}
puts \[list2mdtab \$h \[list 1 2 3 4 5 6\]\]
```" 

} -result {
Some text

| A | B | C |
| ---- | ---- | ---- |
| 1 | 2 | 3 |
| 4 | 5 | 6 |

}

tcltest::test tmdoc-test-1.8 {
    Calling my tmdoc::tmeval with results=asis 
    to display a table using csv input
} -body {
     tmdoc::tmeval "
Some text

```{.csv echo=false, results=asis}
col1,col2,col3
1,2,3
4,5,6
7,8,9
```"

} -result {
Some text

| col1 | col2 | col3 |
| ---- | ---- | ---- |
| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |

}

tcltest::test tmdoc-test-1.9 {
    Calling my tmdoc::tmeval with alert message
    for a note
} -body {
     string trim [tmdoc::tmeval "> \[!NOTE\]
> This is a note!     
"]
} -result {<div class="side-note"><p><b>Note:</b> 
This is a note!     
</p></div>}


tcltest::test tmdoc-test-1.10 {
    Checking abbreviations in the YAML header.
} -body {
    string trim [tmdoc::tmeval "---
title: This is test
author: Max Musterman
---

# {title}

{author}
"]
} -result {---
title: This is test
author: Max Musterman
---

# This is test

Max Musterman}

tcltest::test tmdoc-python-1.1 {
    Checking Python pipe.
} -body {
    string trim [tmdoc::tmeval "```{.pipe pipe=python}
x=1
print(x)
```

X is `py print(x)`
"]
} -result {```{python}
x=1
print(x)
```

```{python}
>>> x=1
>>> print(x)
1

```


X is 1}

tcltest::test tmdoc-python-1.2 {
    Checking Python pipe with py code name.
} -body {
    string trim [tmdoc::tmeval "```{py}
x=2
print(x)
```

X is `py print(x)`
"]
} -result {```{python}
x=2
print(x)
```

```{python}
>>> x=2
>>> print(x)
2

```


X is 2}


tcltest::test tmdoc-octave-1.1 {
    Checking Octave pipe.
} -body {
    string trim [tmdoc::tmeval "```{.pipe pipe=\"octave\"}  
x=1;
disp(x);
y=2;
disp(y);
```

X is `oc disp(x);`!
"]
} -result {```{octave}
x=1;
disp(x);
y=2;
disp(y);
```

```{octave}
octave> x=1;
octave> disp(x);
1
octave> y=2;
octave> disp(y);
2
```


X is 1!}

tcltest::test tmdoc-octave-1.2 {
    Checking Octave pipe code with oc code name.
} -body {
    string trim [tmdoc::tmeval "```{oc}
x=4;
disp(x);
```

X is `oc disp(x);`!
"]
} -result {```{octave}
x=4;
disp(x);
```

```{octave}
octave> x=4;
octave> disp(x);
4
```


X is 4!}

tcltest::test tmdoc-r-1.1 {
    Checking R pipe code with r code name.
} -body {
    string trim [tmdoc::tmeval "```{r}
x=3
print(x)
```

X is `r print(x)`!
"]
} -result {```{R}
x=3
print(x)
```

```{R}
> x=3
> print(x)
[1] 3
```


X is 3!}


tcltest::test tmdoc-r-1.2 {
    Checking R pipe code with continuation lines.
} -body {
    string trim [tmdoc::tmeval "```{r results=show echo=false}
for (i in 1:4) {
    print(i)
}
```
"]
} -result {```{R}
> for (i in 1:4) {
+     print(i)
+ }
[1] 1
[1] 2
[1] 3
[1] 4
```}

tcltest::test tmdoc-r-1.3 {
    Checking R pipe code with image creation.
} -body {
    string trim [tmdoc::tmeval "```{r label=testlab results=show echo=false fig=true}
plot(1)
```
"]
} -result {```{R}
> plot(1)
```

![ ](testlab.png)}

tcltest::test tmdoc-r-1.4 {
    Checking R pipe code with image creation and include=false.
} -body {
    string trim [tmdoc::tmeval "```{r label=testlab results=show echo=false fig=true include=false}
plot(1)
```
"]
} -result {```{R}
> plot(1)
```}


tcltest::test tmdoc-r-1.5 {
    Checking R pipe code with df2md command results=asis.
} -body {
    string trim [tmdoc::tmeval {```{.pipe pipe="R" results="asis" echo=false}
data(mtcars)
df2md(head(mtcars[, 1:4],n=4))
```}]
} -result {||mpg|cyl|disp|hp|
|---|---|---|---|---|
|**Mazda RX4**|21|6|160|110|
|**Mazda RX4 Wag**|21|6|160|110|
|**Datsun 710**|22.8|4|108|93|
|**Hornet 4 Drive**|21.4|6|258|110|}

tcltest::test tmdoc-adoc-1.1 {
    Checking AsciiDoc generation
} -body {
set ::inmode adoc
 string trim [tmdoc::tmeval {```{.tcl results="show" echo=true}
puts "Hello AsciiDoc"
```                
} tdoc]
}  -result {[,tclcode]
----
puts "Hello AsciiDoc"
----


[,tclout]
----
Hello AsciiDoc
----}

tcltest::test tmdoc-adoc-1.2 {
    Checking AsciiDoc generation
    of csv based table
} -body {
string trim [tmdoc::tmeval {
Some text

```{.csv echo=false, results=asis}
col1,col2,col3
1,2,3
4,5,6
7,8,9
```"

} tdoc]}  -result {Some text

[cols="1,1,1"]
|===
| col1| col2| col3

|1|2|3
|4|5|6
|7|8|9
|===}

tcltest::test tmdoc-typst-1.1 {
    Checking AsciiDoc generation
} -body {
set ::inmode typst
 string trim [tmdoc::tmeval {```{.tcl results="show" echo=true}
puts "Hello Typst"
```                
} typst]
}  -result {```tcl
puts "Hello Typst"
```

```tclout
Hello Typst
```}

tcltest::test tmdoc-typst-1.2 {
    Checking Typst  generation
    of csv based table
} -body {
string trim [tmdoc::tmeval {
Some text

```{.csv echo=false, results=asis}
col1,col2,col3
1,2,3
4,5,6
7,8,9
```"

} typst]}  -result {Some text

#set table.hline(stroke: 1.4pt)
#table(
  stroke:none,
  columns: 3,
  table.hline(),
 [*col1*], [*col2*], [*col3*],
  table.hline(),
 [1], [2], [3],
 [4], [5], [6],
 [7], [8], [9],
  table.hline(),
)}

::tcltest::cleanupTests 0

