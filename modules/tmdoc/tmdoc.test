#!/usr/bin/env tclsh
lappend auto_path ..
package require tcltest
package require tmdoc

tcltest::test tmdoc-test-1.1 {
    Calling my tmdoc::tmeval with a simple code chunk
} -body {
     tmdoc::tmeval "\n```{.tcl}
set x 1; set x
```\n"   
} -result {
```{tclcode}
set x 1; set x
```
```{tclout}
==> 1
```

}

tcltest::test tmdoc-test-1.2 {
    Calling my tmdoc::tmeval with a simple code chunk and echo=false
} -body {
     tmdoc::tmeval "\n```{.tcl echo=false}
set x 2; set x
```\n"   
} -result {
```{tclout}
==> 2
```

}

tcltest::test tmdoc-test-1.3 {
    Calling my tmdoc::tmeval with a simple code chunk and 
    eval=false and results=hide
} -body {
     tmdoc::tmeval "
Some text

```{.tcl echo=false results=hide}
set x 3; set x
```\n"
} -result {
Some text


}

tcltest::test tmdoc-test-1.4 {
    Calling my tmdoc::tmeval with a simple code chunk and 
    eval=false and results=hide separated by comma
} -body {
     tmdoc::tmeval "
Some text

```{.tcl echo=false results=hide}
set x 3; set x
```\n"
} -result {
Some text


}

tcltest::test tmdoc-test-1.5 {
    Calling my tmdoc::tmeval with a simple code chunk and 
    eval=false and results=hide separated by comma
    with space and tcl instead of .tcl marker
} -body {
     tmdoc::tmeval "
Some text with space test

``` {tcl echo=false, results=hide}
set x 5; set x
```"

} -result {
Some text with space test

}

tcltest::test tmdoc-test-1.6 {checking include} -body {
   set out [open include.md w 0600]
   puts $out "## Hello Include"
   close $out
   tmdoc::tmeval "
Some text

`tcl include include.md`

Some text
"
} -result {
Some text

## Hello Include

Some text

}

tcltest::test tmdoc-test-1.7 {
    Calling my tmdoc::tmeval with results=asis 
    to display a table using the list2md command
} -body {
     tmdoc::tmeval "
Some text

```{tcl echo=false, results=asis}
set h {A B C}
puts \[list2mdtab \$h \[list 1 2 3 4 5 6\]\]
```"

} -result {
Some text


| A | B | C |
| ---- | ---- | ---- |
|  1 | 2 | 3 |
|  4 | 5 | 6 |

}

tcltest::test tmdoc-test-1.8 {
    Calling my tmdoc::tmeval with results=asis 
    to display a table using csv input
} -body {
     tmdoc::tmeval "
Some text

```{.csv echo=false, results=asis}
col1,col2,col3
1,2,3
4,5,6
7,8,9
```"

} -result {
Some text

| col1 | col2 | col3 |
| ---- | ---- | ---- |
| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |

}

tcltest::test tmdoc-test-1.9 {
    Calling my tmdoc::tmeval with alert message
    for a note
} -body {
     string trim [tmdoc::tmeval "> \[!NOTE\]
> This is a note!     
"]
} -result {<div class="side-note"><p><b>Note:</b> 
This is a note!     
</p></div>}


tcltest::test tmdoc-test-1.10 {
    Checking abbreviations in the YAML header.
} -body {
    string trim [tmdoc::tmeval "---
title: This is test
author: Max Musterman
---

# {title}

{author}
"]
} -result {---
title: This is test
author: Max Musterman
---

# This is test

Max Musterman}

tcltest::test tmdoc-test-1.11 {
    Checking Python pipe.
} -body {
    string trim [tmdoc::tmeval "```{.pipe pipe=python}
x=1
print(x)
```

X is `py print(x)`
"]
} -result {```
x=1
print(x)
```

```
>>> x=1
>>> print(x)
1

```


X is 1}

tcltest::test tmdoc-test-1.12 {
    Checking Octave pipe.
} -body {
    string trim [tmdoc::tmeval "```{.pipe pipe=\"octave\"}  
x=1;
disp(x);
y=2;
disp(y);
```

X is `oc disp(x);`!
"]
} -result {```
x=1;
disp(x);
y=2;
disp(y);
```

```
octave> x=1;
octave> disp(x);
1
octave> y=2;
octave> disp(y);
2
```


X is 1!}

tcltest::test tmdoc-test-1.13 {
    Checking Python pipe with py code name.
} -body {
    string trim [tmdoc::tmeval "```{py}
x=2
print(x)
```

X is `py print(x)`
"]
} -result {```
x=2
print(x)
```

```
>>> x=2
>>> print(x)
2

```


X is 2}

::tcltest::cleanupTests 0


